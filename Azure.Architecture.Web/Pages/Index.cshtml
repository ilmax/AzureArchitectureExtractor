@page
@using Azure.Architecture.Extractor.Services;
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@section NavBar {
    <form asp-page-handler="view" id="viewForm" method="post" class="mr-auto">
        <select class="selectpicker pt-1 pb-1 navbar mr-auto"
            asp-for="SelectedServices"
            asp-items="Model.Services"
            multiple data-live-search="true"
            data-selected-text-format="count"
            title="Choose services">
        </select>
        <select class="selectpicker pt-1 pb-1 navbar mr-auto"
            asp-for="SelectedDependencies"
            asp-items="Model.Dependencies"
            multiple data-live-search="true"
            data-selected-text-format="count"
            title="Choose dependencies">
        </select>
    </form>
}

@section SideBar {
    <li class="nav-item">
        <form asp-page-handler="populate" class="form-inline" method="post">
            <button class="bg-light nav-link border-0 btn-lg btn-block no-shadow" data-toggle="modal" data-target="#populate-modal">Populate Db</button>
        </form>
    </li>
    <li class="nav-item">
        <form asp-page-handler="init" method="post">
            <button class="bg-light nav-link border-0 btn-lg btn-block no-shadow">Reinitialize Db</button>
        </form>
    </li>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="~/js/svg-pan-zoom.min.js" asp-append-version="true"></script>
    <script type="text/javascript">
        $('.selectpicker').selectpicker({ actionsBox: true }).on('hidden.bs.select', function (e) {
            $('#viewForm').submit()
        });

        $(document).ready(function () {
            $('*[data-show]').modal();
        });
    </script>
    @if (!string.IsNullOrEmpty(Model.DotGraph))
    {
        <script type="text/javascript">
            const workerURL = '/js/full.render.js';
            const renderOptions = {
                engine: 'dot',
            };
            let viz = new Viz({ workerURL });
            let dotGraph = $('#dotGraph').text();

            viz.renderSVGElement(dotGraph, renderOptions)
                .then(function (element) {
                    $('#graph')[0].appendChild(element);
                    const panZoomInstance = svgPanZoom(element, {
                        zoomEnabled: true,
                        controlIconsEnabled: true,
                        fit: true,
                        center: true,
                    });
                    panZoomInstance.zoom(0.8)
                })
        </script>
    }
}

@if (!string.IsNullOrEmpty(Model.DotGraph))
{
    <div class="graph-container">
        <div class="graph" id="graph">
        </div>
        <div id="dotGraph" style="display: none">
            @Model.DotGraph
        </div>
    </div>
}

<div class="modal fade bd-example-modal-sm" id="populate-modal" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Operation in progress</h5>
            </div>
            <div class="modal-body">
                Loading services and dependencies in progress....
            </div>
        </div>
    </div>
</div>

@if (Model.UpdateResult is not null)
{
    if (Model.UpdateResult is UpdateResult.Success success)
    {
        <div class="modal fade bd-example-modal-sm" id="populate-result-modal" role="dialog" data-show="true" aria-labelledby="mySmallModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Operation completed</h5>
                    </div>
                    <div class="modal-body">
                        Added @success.NewServices new services and @success.NewDependencies new dependencies
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Model.UpdateResult is UpdateResult.Failure failure)
    {
        <div class="modal fade bd-example-modal-md" id="populate-result-failure-modal" role="dialog" data-show="true" aria-labelledby="mySmallModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-md">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Operation failed</h5>
                    </div>
                    <div class="modal-body">
                        Following error happened during execution of the operation
                        <br />
                        <em>@failure.Exception.Message</em>
                        <br />
                        Check the log for more detailed info
                    </div>
                </div>
            </div>
        </div>
    }
}